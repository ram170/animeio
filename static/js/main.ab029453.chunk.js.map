{"version":3,"sources":["components/banner/Banner.js","components/show/Show.js","App.js","serviceWorker.js","index.js"],"names":["banner","componentDidMount","document","querySelector","addEventListener","e","key","validate","preventDefault","placeholderFun","placeholderBox","inputBox","textContent","classList","add","disableFun","remove","param","props","getData","className","src","contentEditable","onClick","this","onBlur","response","length","status","Button","size","Component","Show","anime","LoR","window","screen","width","title","popularityRank","description","endDate","episodeCount","ageRating","poster","App","state","responseSuccess","responseJSON","axios","get","then","res","data","setState","i","structuredData","restructureData","getElementsByClassName","style","textDecoration","attributes","canonicalTitle","posterImage","large","map","value","Boolean","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.ab029453.chunk.js","sourcesContent":["import React, { Component } from 'react'\r\nimport './Banner.css';\r\nimport Button from 'react-bootstrap/Button';\r\n\r\nexport class banner extends Component {\r\n\r\n    componentDidMount = () => {\r\n        document.querySelector('.input-box-user-input').addEventListener('keypress', (e) => {\r\n            if (e.key === 'Enter') {\r\n                this.validate();\r\n                e.preventDefault(); \r\n            }\r\n        });\r\n    }\r\n\r\n    placeholderFun = () => {\r\n        let placeholderBox = document.querySelector('.input-box-placeholder');\r\n        let inputBox = document.querySelector('.input-box-user-input');\r\n        // Inefficient method but does the job\r\n        if (inputBox.textContent === 'Anime name?') {\r\n            inputBox.textContent = null;\r\n        }\r\n        if (!inputBox.textContent && !placeholderBox.textContent) {\r\n            placeholderBox.textContent = \"Anime name\";\r\n            inputBox.textContent = '';\r\n            inputBox.classList.add('searched-anime'); \r\n        }\r\n    }\r\n\r\n    disableFun = () => {\r\n        let inputBox = document.querySelector('.input-box-user-input');\r\n        if (!inputBox.textContent) {\r\n            inputBox.textContent = 'Anime name?';\r\n            inputBox.classList.remove('searched-anime');\r\n            let placeholderBox = document.querySelector('.input-box-placeholder');\r\n            placeholderBox.textContent = null;\r\n        }\r\n    }\r\n\r\n    validate = () => {\r\n        let param = document.querySelector('.input-box-user-input').textContent && document.querySelector('.input-box-user-input').textContent !== 'Anime name?' ? document.querySelector('.input-box-user-input').textContent : 'asdaDaFSaasdadasd';\r\n        this.props.getData(param);\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <div className=\"banner-container\">\r\n                    <h1 className=\"header-text\">anime.io</h1>\r\n                    <img className=\"img\" src=\"https://images-wixmp-ed30a86b8c4ca887773594c2.wixmp.com/f/28402147-92a1-4060-be7f-0444dbae3bf8/dbhehvt-db573295-0c15-47b1-b271-cffb86b6f241.jpg/v1/fill/w_1024,h_640,q_75,strp/anime_collage_wallpaper_by_dinocojv_d8ayeyz_by_sayaky946_dbhehvt-fullview.jpg?token=eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJ1cm46YXBwOiIsImlzcyI6InVybjphcHA6Iiwib2JqIjpbW3siaGVpZ2h0IjoiPD02NDAiLCJwYXRoIjoiXC9mXC8yODQwMjE0Ny05MmExLTQwNjAtYmU3Zi0wNDQ0ZGJhZTNiZjhcL2RiaGVodnQtZGI1NzMyOTUtMGMxNS00N2IxLWIyNzEtY2ZmYjg2YjZmMjQxLmpwZyIsIndpZHRoIjoiPD0xMDI0In1dXSwiYXVkIjpbInVybjpzZXJ2aWNlOmltYWdlLm9wZXJhdGlvbnMiXX0.YfI-xtIaFkPSvZrIAQu4ZOK6O3o6MIcyAnllwBb_cnk\"></img>\r\n                    <div className=\"search-box\">\r\n                        <h1>For weebs, by a weeb!</h1>\r\n                        <div className=\"main-input-box\">\r\n                            <div className=\"input-box-placeholder\">\r\n                            </div>\r\n                            <div className=\"input-box-user-input placeholder\" contentEditable=\"true\" onClick={this.placeholderFun} onBlur={this.disableFun}>\r\n                                Anime name?\r\n                            </div>\r\n                        </div>\r\n                        { this.props.response.length > 0? <div className=\"scroll\">Scroll down to see results!</div> : null}\r\n                        { !this.props.status ? <div className=\"error-toaster\">Invalid name</div> : null}\r\n                        <Button className=\"button\" size=\"lg\" onClick={this.validate}>Search</Button>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default banner\r\n","import React, { Component } from 'react';\r\nimport './Show.css';\r\n\r\nexport class Show extends Component {\r\n    render() {\r\n        return (\r\n            <div className={ this.props.length!==this.props.anime.LoR ? \"show-main bottom-border\" : \"show-main\"}>\r\n                { this.props.anime && this.props.anime.LoR % 2 === 0 && window.screen.width > 1000 ?\r\n                    <div className=\"container-fluid\">\r\n                        <div className=\"row\">\r\n                            <div className=\"col-md-8\">\r\n                                <span className=\"anime-title\"> {this.props.anime.title} </span> <br></br>\r\n                                <span className=\"popularity\"> Popularity Rank: {this.props.anime.popularityRank}</span> <br></br><br></br>\r\n                                <span className=\"heading\">Description:</span> {this.props.anime.description} <br></br>\r\n                                <div className=\"block-component\">\r\n                                    <span className=\"heading\">End Date:</span> {this.props.anime.endDate}\r\n                                    &nbsp; &nbsp;\r\n                                    <span className=\"heading\">Episode Count:</span> {this.props.anime.episodeCount}\r\n                                </div>\r\n                                <span className=\"heading\">Age Rating:</span> {this.props.anime.ageRating} <br></br>\r\n                            </div>\r\n                            <div className=\"col-md-4\">\r\n                                <img src={this.props.anime.poster} className=\"anime-poster right\"></img>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                    :\r\n                    <div className=\"container-fluid\">\r\n                        <div className=\"row\">\r\n                            <div className=\"col-md-4\">\r\n                                <img src={this.props.anime.poster} className=\"anime-poster\"></img>\r\n                            </div>\r\n                            <div className=\"col-md-8\">\r\n                                <span className=\"anime-title\"> {this.props.anime.title} </span> <br></br>\r\n                                <span className=\"popularity\">Popularity Rank: {this.props.anime.popularityRank}</span> <br></br><br></br>\r\n                                <span className=\"heading\">Description:</span> {this.props.anime.description} <br></br>\r\n                                <div className=\"block-component\">\r\n                                    <span className=\"heading\">End Date:</span> {this.props.anime.endDate}\r\n                                    &nbsp; &nbsp;\r\n                                    <span className=\"heading\">Episode Count:</span> {this.props.anime.episodeCount}\r\n                                </div>\r\n                                <span className=\"heading\">Age Rating:</span> {this.props.anime.ageRating} <br></br>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                }\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Show\r\n","import React, { Component } from 'react';\nimport Banner from './components/banner/Banner';\nimport Show from './components/show/Show';\nimport './App.css';\nimport axios from 'axios';\n\nexport class App extends Component {\n\n  state = {\n    responseSuccess: true,\n    responseJSON: []\n  }\n\n  getData = (param) => {\n    axios.get(`https://kitsu.io/api/edge/anime?filter[text]=${param}`)\n    .then((res) => {\n      if (res.data.data.length > 0) {\n        this.setState({ responseSuccess: true});\n        this.setState({ responseJSON: []});\n        for(let i = 0 ; i < res.data.data.length ; i++) {\n          let structuredData = this.restructureData(res.data.data[i], i);\n          this.setState({ responseJSON: [...this.state.responseJSON, structuredData]});\n        }\n        document.getElementsByClassName('success-text')[0].style.textDecoration = 'none';\n      } else {\n        this.setState({ responseSuccess: false});\n        this.setState({ responseJSON: []});\n        document.getElementsByClassName('success-text')[0].style.textDecoration = 'line-through';\n      }\n    });\n  }\n\n  restructureData = (data, i) => {\n    return {\n      title: data.attributes.canonicalTitle,\n      description: data.attributes.description,\n      endDate: data.attributes.endDate,\n      episodeCount: data.attributes.episodeCount,\n      poster: data.attributes.posterImage.large,\n      popularityRank: data.attributes.popularityRank,\n      ageRating: data.attributes.ageRating,\n      LoR: i+1\n    }\n  }\n\n  render() {\n    return (\n      <div>\n        <div className=\"bottom-border\">\n          <Banner getData={this.getData} status={this.state.responseSuccess} response={this.state.responseJSON}></Banner>\n        </div>\n        <div className=\"show-main-container\">\n          <br></br>\n          <p className=\"success-text\"> Hurray! We've got few result(s) that fit your search key! </p>\n          { this.state.responseJSON.length>0 ? this.state.responseJSON.map(value => <Show anime={value} length={this.state.responseJSON.length}></Show> ) : null}\n        </div>\n      </div>\n    )\n  }\n}\n\nexport default App\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}